
user  root;
worker_processes  1;

env PATH;
env PATH_REDPITAYA;

error_log  /var/log/redpitaya_error.log;
error_log  /var/log/redpitaya_debug.log warn;
#error_log  /var/log/redpitaya_debug.log info;

pid        /run/redpitaya_nginx.pid;

daemon on;

events {
    worker_connections  1024;
}

# worker_rlimit_core 500M;

http {
    include       mime.types;
    default_type  application/octet-stream;

    init_by_lua 'cjson = require "cjson"';
    lua_shared_dict rp_params 10m;
    lua_package_path "/opt/redpitaya/www/conf/lib/lua/?.lua;;";

    access_log /dev/null;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # TODO, it might make sense to configure wersockets to use
    # a simple UNIX socket instead of an IP socket,
    # there should be less overhead
    upstream websocket {
        server 127.0.0.1:9002;
    }

    # Jupyter notebook server
    upstream notebook {
        server 127.0.0.1:8888;
    }

    proxy_temp_path /tmp/proxy 1 2;
    scgi_temp_path  /tmp/scgi 1 2;

    server {
        listen 80;
        listen [::]:80;
        expires off;

        keepalive_timeout 0;

        access_log /dev/null;

        #gzip on;
        #gzip_http_version 1.0;
        #gzip_vary on;
        #gzip_comp_level 6;
        #gzip_proxied any;
        #gzip_types application/json;
        #gzip_buffers 16 8k;
        #gzip_buffers 128 4k;
        #gzip_disable "MSIE [1-6]\.(?!.*SV1)";

        root /opt/redpitaya/www/apps;
        include ../apps/*/nginx.conf;

        location ~ ^/tmp {
            root /;
        }

        location ~ ^/log {
            root /var/;
        }

        location ~ \.css {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/css;
            add_header  Content-Type    text/css;

            # kill cache
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            if_modified_since off;
            expires off;
            etag off;
        }

        location ~ \.js {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/x-javascript;
            add_header  Content-Type    application/x-javascript;
            # kill cache
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            if_modified_since off;
            expires off;
            etag off;
        }

        client_body_buffer_size 1M;
        client_max_body_size 0;
        client_body_temp_path /tmp;
        rp_bazaar_dir     /opt/redpitaya/www/apps;
        rp_bazaar_server  http://bazaar.redpitaya.com;
        rp_tmp_dir        /tmp;

        location /bazaar {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            rp_module_cmd;
        }

        location /wss {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /check_inet {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua_file /opt/redpitaya/www/conf/lua/online.lua;
        }

        location /data {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

                 rp_module_cmd;
        }

        location /reboot {
            content_by_lua '
                os.execute("reboot");
                ngx.say("OK")
            ';
        }

        location /poweroff {
            content_by_lua '
                os.execute("poweroff");
                ngx.say("OK")
            ';
        }

        location /lic_upload {
            content_by_lua '
                local hex_to_char = function(x)
                    return string.char(tonumber(x, 16))
                end

                local unescape = function(url)
                    return url:gsub("%%(%x%x)", hex_to_char):gsub("%+", " ")
                end

                if ngx.req.get_method() == "POST" then
                    ngx.req.read_body();


                    local fname = unescape(ngx.var.request_body):find("lic.lic");
                    local start = unescape(ngx.var.request_body):find("{");
                    local stop  = unescape(ngx.var.request_body):find("]\\n}\\r\\n");

                    if fname ~= nil and start ~= nil and stop ~= nil then

                        local file = io.open("/tmp/lic.lic", "w");
                        io.output(file):write(unescape(ngx.var.request_body):sub(start,stop + 2));
                        io.flush(file);
                        io.close(file);

                        local zfile = io.open("/tmp/zlog.txt", "w");

                        io.output(zfile):write(unescape(ngx.var.request_body):sub(start,stop + 2));
                        io.flush(zfile);
                        io.close(zfile);

                        os.execute("bazaar lic 0");

                        ngx.header["Access-Control-Allow-Origin"]= "*";
                        ngx.header["Access-Control-Allow-Credentials"]= "true";
                        ngx.header["Access-Control-Allow-Methods"]= "GET, POST, OPTIONS";
                        ngx.header["Access-Control-Allow-Headers"]= "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
                        ngx.header["Content-type"]= "text/html; charset=utf-8";
                        ngx.say("OK")
                   else
                        ngx.header["Access-Control-Allow-Origin"]= "*";
                        ngx.header["Access-Control-Allow-Credentials"]= "true";
                        ngx.header["Access-Control-Allow-Methods"]= "GET, POST, OPTIONS";
                        ngx.header["Access-Control-Allow-Headers"]= "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
                        ngx.header["Content-type"]= "text/html; charset=utf-8";
                        ngx.say("Fail_1")
                    end;
                else
                    ngx.say("Fail_2")
                end
            ';
        }

        location /check_nginx_live {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/plain;

            content_by_lua '
                ngx.say("OK")
            ';
        }

        location /set_client_id {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/plain;

            content_by_lua '
                local file = io.open("/usr/local/etc/client_id", "w");
                ngx.req.read_body();
                io.output(file):write(ngx.var.request_body);
                io.flush(file);
                io.close(file);
                ngx.say("OK");
            ';
        }

        location /get_client_id {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/plain;

            content_by_lua '
                local f = io.open("/usr/local/etc/client_id", "r")
                if f then
                    local content = f:read("*all")
                    f:close()
                    ngx.say(content)
                else
                    ngx.say("")
                end
            ';
        }

        location /get_led_status {
            content_by_lua '
                local f = io.popen("/opt/redpitaya/bin/led_control -z")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /get_bug_report {
            client_max_body_size 10M;
            client_body_buffer_size 10M;

            content_by_lua '
                local f = io.popen("/opt/redpitaya/sbin/scripts/bug_report.sh /tmp/bug_rep_out.zip")
                f:read("*all")
                f:close()

                local f_rep = io.open("/tmp/bug_rep_out.zip", "rb")
                local content = f_rep:read("a")
                f_rep:close()

                ngx.header["Access-Control-Allow-Origin"]= "*";
                ngx.header["Access-Control-Allow-Credentials"]= "true";
                ngx.header["Access-Control-Allow-Methods"]= "GET, POST, OPTIONS";
                ngx.header["Access-Control-Allow-Headers"]= "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
                ngx.header["Content-type"] = "application/zip";
                ngx.header["Content-Disposition"] = "attachment; filename=test.zip"

                ngx.say(content)
            ';
        }

        location /set_led_status {
            content_by_lua '
                local args     = ngx.req.get_uri_args()
                local enable   = args.enable    or 0
                if enable then
                    if enable == "true" then
                        local f = io.popen("/opt/redpitaya/bin/led_control -y=On -e=On -r=On")
                        local content = f:read("*all")
                        f:close()
                        ngx.say(content)
                    else
                        local f = io.popen("/opt/redpitaya/bin/led_control -y=Off -e=Off -r=Off")
                        local content = f:read("*all")
                        f:close()
                        ngx.say(content)
                    end
                end
                ngx.say("")
            ';
        }

        location /get_fsck_status {
            content_by_lua '
                local f = io.popen("/usr/sbin/tune2fs -l /dev/mmcblk0p2 | grep \'Maximum mount count\'")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /set_fsck {
            content_by_lua '
                local args     = ngx.req.get_uri_args()
                local count   = args.enable    or 0
                if count then
                    if count == "true" then
                        local f = io.popen("/usr/sbin/tune2fs -c 1 /dev/mmcblk0p2")
                        local content = f:read("*all")
                        f:close()
                        ngx.say(content)
                    else
                        local f = io.popen("/usr/sbin/tune2fs -c -1 /dev/mmcblk0p2")
                        local content = f:read("*all")
                        f:close()
                        ngx.say(content)
                    end
                end
                ngx.say("")
            ';
        }

    }

    server {
        listen 81;
        listen [::]:81;
        expires off;

        keepalive_timeout 0;

        access_log /dev/null;

        root /opt/redpitaya/www/apps;
        include ../apps/*/nginx2.conf;

    }
}
