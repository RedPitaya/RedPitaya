###############################################################################
# eth0
###############################################################################

        location /get_eth0_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local f = io.popen([[ip -4 addr list eth0]])
                local content = f:read("*all")
                f:close()

                local gf = io.popen([[ip route | grep -Po "(?<=via )(\d{1,3}.){4}"]])
                local gateway = gf:read("*all")
                gf:close()

                local config = ""
                local f = io.open("/etc/systemd/network/wired.network", "r")
                config = f:read("*all")
                f:close()

                ngx.say(content.."\\ngateway:"..gateway.."\\nconfig:\\n"..config)
            ';
        }

        location /set_dhcp_client_eth0 {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local args = ngx.req.get_uri_args()

                local network =          "[Match]\\n"
                      network = network.."Name=eth0\\n"
                      network = network.."[Network]\\n"
                      network = network.."LinkLocalAddressing=yes\\n"
                      network = network.."DHCP=yes\\n"
                      network = network.."IPForward=yes\\n"
                      network = network.."IPMasquerade=yes\\n"
                      network = network.."[Address]\\n"

                os.execute("rw")
                local f = io.open("/etc/systemd/network/wired.network", "w")
                f:write(network)
                f:close()

                os.execute("systemctl restart systemd-networkd.service")
                os.execute("ro")
                os.execute("kill -HUP $(pgrep nginx | head -1)")
            ';
        }

        location /set_dhcp_server_eth0 {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local args = ngx.req.get_uri_args()

                local network =          "[Match]\\n"
                      network = network.."Name=eth0\\n"
                      network = network.."[Link]\\n"
                      network = network.."RequiredForOnline=no\\n"
                      network = network.."[Network]\\n"
                      network = network.."DHCPServer=yes\\n"
                if args.address then
                      network = network.."Address="..args.address.."\\n"
                end
                      network = network.."ConfigureWithoutCarrier=yes\\n"
                      network = network.."[DHCPServer]\\n"
                      network = network.."PoolOffset=100\\n"
                      network = network.."PoolSize=20\\n"
                      network = network.."EmitDNS=yes\\n"
                if args.dns then
                      network = network.."DNS="..args.dns.."\\n"
                end

                os.execute("rw")
                local f = io.open("/etc/systemd/network/wired.network", "w")
                f:write(network)
                f:close()

                os.execute("systemctl restart systemd-networkd.service")
                os.execute("ro")
                os.execute("kill -HUP $(pgrep nginx | head -1)")
            ';
        }

        location /set_static_eth0 {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local args = ngx.req.get_uri_args()

                local network =          "[Match]\\n"
                      network = network.."Name=eth0\\n"
                      network = network.."[Network]\\n"
                      network = network.."LinkLocalAddressing=yes\\n"
                if args.address then
                      network = network.."Address="..args.address.."\\n"
                end
                if args.gateway then
                      network = network.."Gateway="..args.gateway.."\\n"
                end
                if args.dns then
                      network = network.."DNS="..args.dns.."\\n"
                end
                      network = network.."IPForward=yes\\n"
                      network = network.."IPMasquerade=yes\\n"
                      network = network.."[Address]\\n"
                if args.broadcast then
                      network = network.."Broadcast="..args.broadcast.."\\n"
                end

                os.execute("rw")
                local f = io.open("/etc/systemd/network/wired.network", "w")
                f:write(network)
                f:close()

                os.execute("systemctl restart systemd-networkd.service")
                os.execute("ro")
                os.execute("kill -HUP $(pgrep nginx | head -1)")
            ';
        }
###############################################################################
# wlan0 client
###############################################################################

        location /get_wlan0_state {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/get_linked.sh")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /get_wlan0_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local f = io.popen("ip addr list wlan0")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /get_wnet_list {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/scan.sh")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }


        location /wlan0_up {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                os.execute("ip link set dev wlan0 up")
            ';
        }

        location /connect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local args     = ngx.req.get_uri_args()
                local ssid    = args.ssid    or 0
                local password = args.password or 0

                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/connect.sh " .. ssid .. " " .. password)
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /get_connected_wlan {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/get_ssid.sh")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /disconnect_wifi {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/disconnect.sh")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

###############################################################################
# wlan0 access point
###############################################################################

        location /wifi_create_point {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/plain;

            content_by_lua '
                local args     = ngx.req.get_uri_args()
                local ssid    = args.ssid    or 0
                local password = args.password or 0

                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/create_ap.sh " .. ssid .. " " .. password)
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /remove_ap {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/disconnect.sh")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

        location /get_ap_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type plain/text;

            content_by_lua '
                local f = io.popen("/opt/redpitaya/www/apps/network_manager/scripts/get_ssid_ap.sh")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }

###############################################################################
# wlan0 AP SSID
###############################################################################

        location /get_ap_ssid {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type text/plain;

            content_by_lua '
                local f = io.popen("iw dev wlan0 info | awk \'/ssid/{print $2}\'")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }
